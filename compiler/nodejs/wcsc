#!/usr/bin/env node
// wcsc.exe md5 = "3999c590c57c764b152bc6db3b3288c4"
const version = "20220308";
const { spawn } = require("child_process");
const fs = require("fs");
const path = require("path");
const args = process.argv.slice(2);
const wcscPath = path.resolve(__dirname, "./wcsc.bin");
const DEBUG_OUTPUT = process.env["WX_DEBUG_COMPILER_OUTPUT"];

function encode1(s) {
    return encodeURI(s).replace(
        /%(u[0-9A-F]{4})|(%[0-9A-F]{2})/gm,
        function ($0, $1, $2) {
            return ($1 && "\\" + $1.toLowerCase()) || decodeURI($2);
        }
    );
}
if (args.includes("-ll")) {
    const wcsc = spawn(wcscPath, args, {
        cwd: process.cwd(),
    });
    const spwanData = [],
        errData = [];
    wcsc.stdout.on("data", (e) => {
        spwanData.push(e);
    });
    wcsc.stderr.on("data", (e) => {
        errData.push(e);
    });
    wcsc.on("close", (n) => {
        if (0 === n) {
            let str = Buffer.concat(spwanData)
                .toString()
            DEBUG_OUTPUT && fs.writeFileSync(`${DEBUG_OUTPUT}/linux_output.js`, str)
            const resultSplit = str.split("=");
            const tempObj = {};
            for (
                let i = 0, total = resultSplit.length;
                i < total && resultSplit[i + 1];
                i += 2
            ) {
                // a=b ---> a: b
                const key = resultSplit[i];
                if (key === "version") continue;
                tempObj[key] = resultSplit[i + 1]
                .replace(
                    /[^\\]((\\x[\da-f]{2}|\\u[\da-f]{4})){1,}/g,
                    function ($0, $1, $2) {
                        return eval('"' + $0 + '"');
                    }
                );
            }
            const resultObj = {
                common: tempObj.comm,
                pageWxss: {},
            };
            for (const key in tempObj) {
                if (key.endsWith(".wxss")) {
                    resultObj.pageWxss[key] = tempObj[key];
                }
            }
            let result = JSON.stringify(resultObj);
            result = result.replace(/\\\\/g, "\\");
            // result = result.replace(/\\[\s\S]{1}/g, function ($0, $1, $2) {
            //     let c;
            //     process.stderr.write($0 + "\n=====\n")
            //     switch ($0) {
            //         case "\\n":
            //             c = "\n";
            //             break;
            //         case "\\t":
            //             c = "\t";
            //             break;

            //         default:
            //             c = $0[1];
            //             break;
            //     }
            //     process.stderr.write("\\u" + c.charCodeAt(0).toString(16).padStart(4, "0") + "\n=====\n")
            //     return "\\u" + c.charCodeAt(0).toString(16).padStart(4, "0");
            // });
            process.stdout.write(result);
            // process.stderr.write(result);
        } else {
            const err = Buffer.concat(errData).toString()
            DEBUG_OUTPUT &&
                fs.writeFileSync(`${DEBUG_OUTPUT}/linux_err.js`, err);
            process.stderr.write(err);
            process.exitCode = n;
        }
    });
} else {
    const wcsc = spawn(wcscPath, args, {
        cwd: process.cwd(),
        stdio: "inherit",
    });
    wcsc.on("close", (code) => {
        process.exitCode = code;
    });
}
